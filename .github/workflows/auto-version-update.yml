name: 🚀 Auto Version Update

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".gitignore"

jobs:
  auto-version-update:
    name: Auto Update Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"

          # 버전을 배열로 분할 (예: 0.1.0 -> [0, 1, 0])
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # 패치 버전 증가
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new-version }}"
          npm version $NEW_VERSION --no-git-tag-version
          echo "Updated package.json to version: $NEW_VERSION"

      - name: Update next.config.ts build info
        run: |
          # 빌드 날짜와 시간을 현재 시간으로 업데이트
          BUILD_DATE=$(date -u +"%Y-%m-%d")
          BUILD_TIME=$(date -u +"%H:%M:%S")

          # next.config.ts 파일에서 빌드 정보 업데이트
          sed -i "s/const buildDate = .*/const buildDate = \"$BUILD_DATE\";/" next.config.ts
          sed -i "s/const buildTime = .*/const buildTime = \"$BUILD_TIME\";/" next.config.ts

          echo "Updated build info: $BUILD_DATE $BUILD_TIME"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # 변경사항이 있는지 확인
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add package.json next.config.ts
            git commit -m "🚀 Auto version update: ${{ steps.new-version.outputs.new-version }}"
            git push
            echo "Version updated and pushed successfully"
          fi

      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new-version.outputs.new-version }}
          release_name: Release v${{ steps.new-version.outputs.new-version }}
          body: |
            ## 🚀 Auto Release v${{ steps.new-version.outputs.new-version }}

            ### Changes
            - Automated version bump
            - Updated build timestamp: ${{ steps.new-version.outputs.new-version }}

            ### Build Info
            - **Build Date**: $(date -u +"%Y-%m-%d")
            - **Build Time**: $(date -u +"%H:%M:%S")
            - **Environment**: Production

            ---
            *This release was automatically generated by GitHub Actions*
          draft: false
          prerelease: false

      - name: Notify deployment
        if: success()
        run: |
          echo "🎉 Version ${{ steps.new-version.outputs.new-version }} has been successfully deployed!"
          echo "📦 New release created: v${{ steps.new-version.outputs.new-version }}"
          echo "🕒 Build timestamp: $(date -u +"%Y-%m-%d %H:%M:%S")"
